@page "/Chat"
@using CongresoServer.Pages.Eventos
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ApplicationDbContext _DbContext
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@implements IAsyncDisposable


<MudGrid>
    <MudItem xs="12" xl="12" md="12">
        <MudPaper Class="py-4 flex-grow-1">
            <MudToolBar Dense="true">
                <MudText Typo="Typo.h6" Inline="true" Class="mr-2"></MudText>
                <MudText Typo="Typo.h6">Chat</MudText>
                <MudSpacer />
            </MudToolBar>
            <div class="d-flex flex-column px-4" style="max-height:800px; overflow:scroll;">
                @foreach (var message in messages)
                {
                <li>@message</li>
                }
            </div>
            <MudPaper Class="d-flex flex-row px-2 mx-4" Style="background-color: var(--mud-palette-background-grey);">
                <MudText>@userInput:</MudText>
                <MudTextField T="string" @bind-Value="messageInput" Placeholder="Mensaje" DisableUnderLine="true" Class="mt-n2 mx-4"></MudTextField>
                <MudIconButton @onclick="Send" Icon="@Icons.Material.Outlined.Send" Color="Color.Warning"></MudIconButton>
            </MudPaper>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    Model.Participante Participante { get; set; }
    public string Admin { get; set; }
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var current = authstate.User.Identity.Name;
        Participante = _DbContext.Participante.FirstOrDefault(p => p.Email == current);
        if (Participante == null)
        {
            userInput = "Administrador";
        }
        else
        {
            userInput = Participante.Nombre;
        }
    }

    private async Task Send()
    {
        if (messageInput.Length != 0)
        {
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendMessage", userInput, messageInput);
                messageInput = null;
            }
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
