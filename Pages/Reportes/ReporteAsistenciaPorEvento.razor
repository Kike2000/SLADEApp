@page "/ReporteAsistencias"
@using ClosedXML.Excel
@inject ApplicationDbContext _DbContext
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject UserManager<IdentityUser> _userManager;
@inject IJSRuntime js
<PageTitle>Reportes - SLADE</PageTitle>
<MudGrid>
    <MudItem xs="4" sm="4" md="4">
        <MudSelect SelectedValuesChanged="()=>Enviar()" T="Model.Evento" Label="Selecciona Un Evento" @bind-Value="@EventoSeleccionado" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" Required=true RequiredError="Seleccione una opción">
            @foreach (var item in Eventos.OrderBy(p => p.HoraInicio))
            {
                <MudSelectItem T="Model.Evento" Value="@(item)">@item.Nombre</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    @if (RegistrosVM.Count != 0)
    {
        <MudItem xs="1" sm="1" md="3">
            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="Exportar">Exportar a Excel</MudButton>
        </MudItem>
    }
</MudGrid>

<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <MudTable T="Model.RegistrosViewModel" Items="@RegistrosVM" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Nombre</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Hora de Registro</MudTh>
                <MudTh>Total: @RegistrosVM.Count</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nombre">@context.NombreParticipante</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Hora de Registro">@context.HoraDeRegistro</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>
<br />
<h1>Gráficas de barras</h1>
<MudPaper Class="pa-4">
    <MudGrid>
        <MudItem xs="6" sm="6" md="6">
            <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px">
                <CustomGraphics>
                    <style>
                        .heavy {
                            font: bold 30px Helvetica;
                        }

                        .Rrrrr {
                            font: italic 40px Helvetica;
                        }
                    </style>
                    <text x="80" y="35" class="heavy">Asistencias registradas</text>
                    <text x="105" y="70" class="Rrrrr">por evento</text>
                </CustomGraphics>
            </MudChart>
            <br />
        </MudItem>
        <MudItem xs="6" sm="6" md="6">
            <MudChart ChartType="ChartType.Bar" ChartSeries="@Series2" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels2" Width="100%" Height="350px">
                <CustomGraphics>
                    <style>
                        .heavy {
                            font: bold 30px Helvetica;
                        }

                        .Rrrrr {
                            font: italic 40px Helvetica;
                        }
                    </style>
                    <text x="170" y="35" class="heavy">Registros sin asistencias</text>
                    <text x="195" y="70" class="Rrrrr">por evento</text>
                </CustomGraphics>
            </MudChart>
        </MudItem>
    </MudGrid>
</MudPaper>
<br />

<h1>Gráfica circular comparativa</h1>
<MudPaper Class="pa-4">
    <MudGrid>
        <MudItem xs="6" sm="6" md="12">
            <MudSelect Style="align-content:center" SelectedValuesChanged="()=>Comparativo()" T="Model.Evento" Label="Selecciona Un Evento" @bind-Value="@EventoSeleccionado" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" Required=true RequiredError="Seleccione una opción">
                @foreach (var item in Eventos.OrderBy(p => p.HoraInicio))
                {
                    <MudSelectItem T="Model.Evento" Value="@(item)">@item.Nombre</MudSelectItem>
                }
            </MudSelect>
            <br />
            <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@data3" InputLabels="@labels2">
                <CustomGraphics>
                    <text class="donut-inner-text" x="53%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Asistencias: @TotalAsistenciasPie.ToString()</text>
                    <text class="donut-inner-text" x="53%" y="55%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="1.5">Registros sin Asistencias: @TotalSinAsistenciasPie.ToString()</text>
                </CustomGraphics>
            </MudChart>
        </MudItem>
    </MudGrid>
</MudPaper>
<br
<MudPaper Class="pa-4">
    <MudGrid>
        @if (RegistrosVM3.Count != 0)
        {
            <MudItem xs="1" sm="1" md="3">
                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="Exportar2">Exportar a Tabla a Excel</MudButton>
            </MudItem>
        }
        <MudItem xs="6" sm="12" md="12">
            <MudTable T="Model.RegistrosViewModel" Items="@RegistrosVM3" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Nombre</MudTh>
                    <MudTh>Registros con asistencias</MudTh>
                    <MudTh>Registros sin Asistencias</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Nombre">@context.NombreEvento</MudTd>
                    <MudTd DataLabel="Nombre">@context.Registros</MudTd>
                    <MudTd DataLabel="Email">@context.TotalAsistencias</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudPaper>
<br />
<MudPaper Class="pa-4">
    <MudGrid>

    </MudGrid>
</MudPaper>



@code {
    public List<Model.Evento> Eventos { get; set; }
    public Model.Evento EventoSeleccionado { get; set; }
    public List<Model.RegistrosViewModel> RegistrosVM { get; set; }
    public List<Model.RegistrosViewModel> RegistrosVM2 { get; set; }
    public List<Model.RegistrosViewModel> RegistrosVM3 { get; set; }
    public int TotalAsistenciasPie { get; set; }
    public int TotalSinAsistenciasPie { get; set; }
    public int TotalAsistencias { get; set; }
    public double TotalAsistenciasSin { get; set; }
    private int Index = -1;
    public double[] data = { 67, 7, 56, 3, 8 };
    public double[] dataSin = { 67, 7, 56, 3, 8 };
    string[] labels = { "Conferencia Magistral", "Un Nuevo Mapa", "La Investigación de Mercado", "Reflexiones del Poder", "Mesa 1.- Transformación", };
    string[] labelsSinRegistro { get; set; }
    protected override void OnInitialized()
    {
        TotalAsistencias = 0;
        RegistrosVM = new List<RegistrosViewModel>();
        RegistrosVM2 = new List<RegistrosViewModel>();
        RegistrosVM3 = new List<RegistrosViewModel>();
        Eventos = _DbContext.Evento.ToList();
        Series = new List<MudBlazor.ChartSeries>();
        Series2 = new List<MudBlazor.ChartSeries>();
        SeriesSinRegistros = new List<MudBlazor.ChartSeries>();


        foreach (var evento in _DbContext.Evento.ToList())
        {
            if (_DbContext.Registro.Any(p => p.EventoId == evento.Id && p.Asistencia))
            {
                var chartSerie2 = new ChartSeries
                    {
                        Name = evento.Nombre,
                        Data = new double[] { _DbContext.Registro.Where(e => e.EventoId == evento.Id && e.Asistencia).Count() }
                    };
                var registro = new Model.RegistrosViewModel
                    {
                        NombreEvento = evento.Nombre,
                        TotalAsistencias = _DbContext.Registro.Where(e => e.EventoId == evento.Id && e.Asistencia).Count(),
                        Registros = _DbContext.Registro.Where(e => e.EventoId == evento.Id && !e.Asistencia).Count()
                    };
                RegistrosVM2.Add(registro);
                Series.Add(chartSerie2);
            }
            else
            {
                var chartSerie2 = new ChartSeries
                    {
                        Name = evento.Nombre,
                        Data = new double[] { _DbContext.Registro.Where(e => e.EventoId == evento.Id && !e.Asistencia).Count() }
                    };
                var registro = new Model.RegistrosViewModel
                    {
                        NombreEvento = evento.Nombre,
                        TotalAsistencias = _DbContext.Registro.Where(e => e.EventoId == evento.Id && e.Asistencia).Count(),
                        Registros = _DbContext.Registro.Where(e => e.EventoId == evento.Id && !e.Asistencia).Count()
                    };
                RegistrosVM2.Add(registro);
                Series2.Add(chartSerie2);
            }
        }


        var eventos = _DbContext.Evento.ToList();
        var labelsS = new List<string>();
        var newData = new List<double>();
        foreach (var evento in eventos)
        {
            var totalSinAsistencias = _DbContext.Registro.Where(p => p.EventoId == evento.Id && !p.Asistencia).Distinct().ToList();
            var totalAsistencias2 = _DbContext.Registro.Where(p => p.EventoId == evento.Id && p.Asistencia).Distinct().ToList();
            labelsS.Add(evento.Nombre);
            newData.Add(totalSinAsistencias.Count);
            var registro2 = new Model.RegistrosViewModel
                {
                    NombreEvento = evento.Nombre,
                    TotalAsistencias = totalSinAsistencias.Count(),
                    Registros = totalAsistencias2.Count()
                };
            RegistrosVM3.Add(registro2);
            var chartSerie = new ChartSeries
                {
                    Name = evento.Nombre,
                    Data = new double[] { totalSinAsistencias.Count() }
                };
            SeriesSinRegistros.Add(chartSerie);
        }
        labelsSinRegistro = labelsS.ToArray();
        dataSin = newData.ToArray();
        TotalAsistenciasSin = dataSin.Sum();
        base.OnInitialized();
    }

    public List<MudBlazor.ChartSeries> Series { get; set; }
    public List<MudBlazor.ChartSeries> Series2 { get; set; }
    public string[] XAxisLabels = { "" };
    public string[] XAxisLabels2 = { "" };

    public List<MudBlazor.ChartSeries> SeriesSinRegistros { get; set; }
    public string[] XAxisLabelsSinRegistros = { "Eventos con Registros sin asistencias" };
    double[] data3 = { 50, 50 };
    string[] labels2 = { "Registro de Asistencias", "Registros sin Asistencias" };
    int dataSize = 2;

    protected void Enviar()
    {
        RegistrosVM = new List<RegistrosViewModel>();
        var registros = _DbContext.Registro.Where(p => p.EventoId == EventoSeleccionado.Id && p.Asistencia).ToList();
        foreach (var registro in registros)
        {
            var participante = _DbContext.Participante.FirstOrDefault(p => p.Id == registro.ParticipanteId);
            var registroVM = new RegistrosViewModel
                {
                    Email = participante.Email,
                    NombreParticipante = participante.Nombre,
                    HoraDeRegistro = registro.HoraDeRegistro,
                    NombreEvento = EventoSeleccionado.Nombre
                };
            RegistrosVM.Add(registroVM);
        }
        if (RegistrosVM.Count == 0)
        {
            Snackbar.Add("No existen registros de asistencias", Severity.Error, config => { config.ShowCloseIcon = true; config.ShowTransitionDuration = 150; config.HideTransitionDuration = 150; config.VisibleStateDuration = 3000; });
        }
    }

    private void Comparativo()
    {
        var new_data = new double[dataSize];

        for (int i = 0; i < new_data.Length; i++)
        {
            if (i == 0)
            {
                new_data[i] = _DbContext.Registro.Where(p => p.Asistencia && p.EventoId == EventoSeleccionado.Id).ToList().Count * 100;
                TotalAsistenciasPie = _DbContext.Registro.Where(p => p.Asistencia && p.EventoId == EventoSeleccionado.Id).ToList().Count;
            }
            else
            {
                new_data[i] = _DbContext.Registro.Where(p => !p.Asistencia && p.EventoId == EventoSeleccionado.Id).ToList().Count * 100;
                TotalSinAsistenciasPie = _DbContext.Registro.Where(p => !p.Asistencia && p.EventoId == EventoSeleccionado.Id).ToList().Count;
            }
        }
        data3 = new_data;
        StateHasChanged();
    }
    public async Task Exportar()
    {
        var xls = new Excel();
        await xls.GenerateWeatherForecastAsync(js, RegistrosVM.ToArray(), $"{@EventoSeleccionado.Nombre.Substring(0, 4)}.xlsx");
    }
    public async Task Exportar2()
    {
        var xls = new Excel();
        await xls.GenerateWeatherForecastAsync2(js, RegistrosVM3.ToArray(), $"ReporteComparativo.xlsx");
    }
}
