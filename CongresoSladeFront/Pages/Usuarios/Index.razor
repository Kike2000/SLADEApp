@*@page "/Chat"
@using BlazorChat.Client.Data
@using CongresoServer.Data
@using static CongresoServer.Data.ChatClient
@inject NavigationManager _navigationManager;
<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>
<div class="top-row px-4">
    @if (chatting)
    {
        <p>Estás conectado como <b>@username</b></p>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="DisconnectAsync">Desconectar</button>
    }
</div>

<div class="context px-4">
    @if (!chatting)
    {
        <h2>Chat</h2>
        <p>Digite su nombre para empezar la conversación</p>
        <input type="text" maxlength="32" @bind="@username" />
        <button @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span>Empezar!</button>
        @if (message != null)
        {
            <div class="invalid-feedback">@message</div>
            <small id="emailHelp" class="form-text text-muted">@message</small>
        }

        @if (chatting)
        {
            <div id="scrollbox">
                @foreach (var item in messages)
                {
                    <div class="@item.CSS">
                        <div class="user">
                            @item.Username
                        </div>
                        <div class="user">
                            @item.Body
                        </div>
                    </div>
                }
                <hr />
                <textarea class="input-lg" placeholder="..." @bind="newMessage"></textarea>
                <button class="btn" @onclick="@SendAsync">Enviar</button>
            </div>
        }
    }
</div>


@code {
    bool chatting = false;
    string username = null;
    ChatClient client = null;
    string message = null;
    string newMessage = null;
    List<Message> messages = new List<Message>();

    async Task Chat()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            message = "Digite su nombre";
            return;
        }

        try
        {
            messages.Clear();
            client = new ChatClient(username, _navigationManager);
            client.MessageReceived += MessageReceived;
            Console.WriteLine("Index:chat starting...");
            await client.StarAsync();
            Console.WriteLine("Index:chat starting...");
            chatting = true;
        }
        catch (Exception ex)
        {
            message = $"Error: Failed to start chat {ex.Message}";
            Console.WriteLine(ex.Message);
            Console.WriteLine(ex.StackTrace);

        }

        void MessageReceived(object sender, MessageReceivedEventArgs e)
        {
            Console.WriteLine($"Blazor: receive {e.Username} : {e.Message}");
            bool isMine = false;
            if (!string.IsNullOrWhiteSpace(e.Username))
            {
                isMine = string.Equals(e.Username, username, StringComparison.CurrentCultureIgnoreCase);
            }
            var newMsg = new Message(e.Username, e.Message, isMine);
            messages.Add(newMsg);
            StateHasChanged();
        }

    }
    async Task DisconnectAsync()
    {
        if (chatting)
        {
            await client.StarAsync();
            client = null;
            message = "Chat finalizado";
            chatting = false;
        }
    }

    async Task SendAsync()
    {
        if (chatting && !string.IsNullOrWhiteSpace(newMessage))
        {
            await client.SendAsync(newMessage);
            newMessage = "";
        }
    }



    class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }
    }
}*@